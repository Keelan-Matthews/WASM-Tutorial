@page "/"

<h1>Tic Tac Toe</h1>

<div>
    <table>
        @for (var i = 0; i < 3; i++)
        {
            <tr>
                @for (var j = 0; j < 3; j++)
                {
                    var row = i;
                    var col = j;
                    <td>
                        <button @onclick="() => HandleCellClick(row, col)" 
                                disabled="@(!IsCellEmpty(row, col))"
                                class="@GetCellClass(row, col)">
                            @Board[row, col]
                        </button>
                    </td>
                }
            </tr>
        }
    </table>
</div>

<h2>@GameResult</h2>

<button @onclick="ResetGame">Reset Game</button>

@code {
    private string GetCellClass(int row, int column) =>
    Board[row, column] == 'X' ? "x" :
    Board[row, column] == 'O' ? "o" :
    "";

    private char[,] Board = new char[3, 3];
    private char currentPlayer = 'X';
    private string GameResult = "";
    private int MoveCount = 0;
    private int LastMoveRow = -1;
    private int LastMoveColumn = -1;

    private bool IsCellEmpty(int row, int column) => Board[row, column] == '\0';


    private void ResetGame()
    {
        Board = new char[3, 3];
        currentPlayer = 'X';
        GameResult = "";
        MoveCount = 0;
        LastMoveRow = -1;
        LastMoveColumn = -1;
    }

    private void HandleCellClick(int row, int col)
    {
        if (Board[row, col] == '\0' && GameResult == "")
        {
            Board[row, col] = currentPlayer;
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            MoveCount++;
            LastMoveRow = row;
            LastMoveColumn = col;
            CheckForWinner(); 
        }
    }

    private void CheckForWinner()
    {
        char currentPlayerSymbol = Board[LastMoveRow, LastMoveColumn];

        var winningConditions = new[]
        {
            Enumerable.Range(0, 3).All(i => Board[LastMoveRow, i] == currentPlayerSymbol),
            Enumerable.Range(0, 3).All(i => Board[i, LastMoveColumn] == currentPlayerSymbol),
            LastMoveRow == LastMoveColumn && Enumerable.Range(0, 3).All(i => Board[i, i] == currentPlayerSymbol),
            LastMoveRow + LastMoveColumn == 2 && Enumerable.Range(0, 3).All(i => Board[i, 2 - i] == currentPlayerSymbol)
        };

        if (winningConditions.Any(condition => condition))
        {
            GameResult = $"{currentPlayerSymbol} wins! 🎉";
            return;
        }

        if (MoveCount == (3 * 3 - 1))
        {
            GameResult = "It's a draw!";
        }
    }
}